apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.mikepenz.aboutlibraries.plugin'

def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "ch.dreipol.rezhycle"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 29
        versionName "0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    flavorDimensions "rezhycle"
    signingConfigs {
        config {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['productionKeyAlias']
                keyPassword keystoreProperties['productionKeyPassword']
                storeFile file(keystoreProperties['productionKeyStore'])
                storePassword keystoreProperties['productionStorePassword']
            }
        }
    }
    productFlavors {
        production {
            dimension "rezhycle"
            applicationId "ch.dreipol.rezhycle"
            signingConfig signingConfigs.config
            // Below config can be used to test release
            // signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        production {
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding = true
    }
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {

    Properties properties = new Properties()
    File localProperties = new File(rootProject.projectDir.absolutePath + '/local.properties')
    String dreidroidDir = null
    if (localProperties.exists()) {
        properties.load(localProperties.newDataInputStream())
        dreidroidDir = properties.getProperty('dreidroid.dir')
    }
    if (dreidroidDir != null) {
        implementation project(":dreidroid")
    } else {
        // if the dreidroid local directory is not set we will fetch from github
        implementation "com.github.dreipol:dreidroid:$dreidroid_version"
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':shared')

    implementation "com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2"

    //Android Jetpack Dependencys
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "com.airbnb.android:lottie:3.5.0"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.2"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.2"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.work:work-runtime-ktx:2.4.0"

    implementation "com.mikepenz:aboutlibraries-core:$aboutlibraries"
    implementation "com.mikepenz:aboutlibraries:$aboutlibraries"

    //enables java 8 features, like java.time.Instant which is used with kotlinx.datetime
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'

    //testDependencies
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'junit:junit:4.13'
}

def downloadTranslation(Object... locales) {
    def readOnlyKey = "BLbi8aZ_fOyFJKUpSpSxztpa60IjUVT8"
    for (locale in locales) {
        println "fetching locale " + locale[1]
        def targetFile = new File("$projectDir/src/main/res/" + locale[0] + "/strings.xml")
        targetFile.createNewFile()
        targetFile.text = ['curl', "https://localise.biz/api/export/locale/" + locale[1] + ".xml?key=" + readOnlyKey].execute().text.replaceAll("<!--[\\s\\S]*?-->", "")
    }
}

task localise { task ->
    downloadTranslation(["values", "de-CH"])
    downloadTranslation(["values-en", "en"])
}
build.dependsOn localise

ktlint {
    ignoreFailures.set(false)
    android.set(true)
}

preBuild.dependsOn ktlintFormat